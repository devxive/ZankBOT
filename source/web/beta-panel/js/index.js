$(function(){var webSocket=new WebSocket((getProtocol()==='https://'?'wss://':'ws://')+window.location.host.split(':')[0]+':'+getPanelPort()),callbacks=[],listeners=[],socket={};var sendToSocket=function(message){try{webSocket.send(JSON.stringify(message))}catch(e){helpers.logError('Failed to send message to socket: '+e.message,!0)}};var generateCallBack=function(id,tables,isUpdate,isArray,callback,storeKey){if(callbacks[id]!==undefined){helpers.logError('Callback with id "'+id+'" exists already. Aborting update.',!0)}else{callbacks[id]={await:(tables.length===0?1:tables.length),isUpdate:isUpdate,isArray:isArray,func:function(e){try{callback(e)}catch(ex){helpers.logError('Failed to run callback: '+ex.stack,!0)}},storeKey:storeKey,queryData:[]}}};socket.addListener=function(listener_id,callback){if(listeners[listener_id]===undefined){listeners[listener_id]=function(e){try{callback(e)}catch(ex){helpers.logError('Failed to run listener: '+ex.stack,!0)}}}};socket.addListener=function(listener_id){if(listeners[listener_id]!==undefined){delete listeners[listener_id]}};socket.sendCommand=function(callback_id,command,callback){generateCallBack(callback_id,[],!0,!1,callback);sendToSocket({command:String(command),query_id:callback_id})};socket.sendCommandSync=function(callback_id,command,callback){generateCallBack(callback_id,[],!0,!1,callback);sendToSocket({command_sync:String(command),query_id:callback_id})};socket.wsEvent=function(callback_id,script,argsString,args,callback){generateCallBack(callback_id,[],!0,!1,callback);sendToSocket({socket_event:callback_id,script:script,args:{arguments:String(argsString),args:args}})};socket.updateDBValue=function(callback_id,table,key,value,callback){generateCallBack(callback_id,[],!0,!1,callback);sendToSocket({dbupdate:callback_id,update:{table:String(table),key:String(key),value:String(value)}})};socket.updateDBValues=function(callback_id,dataObj,callback){generateCallBack(callback_id,dataObj.tables,!0,!1,callback);for(let i=0;i<dataObj.tables.length;i++){sendToSocket({dbupdate:callback_id,update:{table:String(dataObj.tables[i]),key:String(dataObj.keys[i]),value:String(dataObj.values[i])}})}};socket.getDBValue=function(callback_id,table,key,callback){generateCallBack(callback_id,[],!1,!1,callback);sendToSocket({dbquery:callback_id,query:{table:String(table),key:String(key)}})};socket.getDBValues=function(callback_id,dataObj,storeKey,callback){callback=(callback===undefined?storeKey:callback);generateCallBack(callback_id,dataObj.tables,!1,!1,callback,(typeof storeKey==='function'?!1:!0));for(let i=0;i<dataObj.tables.length;i++){sendToSocket({dbquery:callback_id,query:{table:String(dataObj.tables[i]),key:String(dataObj.keys[i])}})}};socket.getDBTableValuesByOrder=function(callback_id,table,limit,offset,order,isNumber,callback){generateCallBack(callback_id,[],!1,!0,callback);sendToSocket({dbvaluesbyorder:callback_id,query:{table:table,limit:String(limit),offset:String(offset),order:order,number:String(isNumber)}})};socket.getDBTableValues=function(callback_id,table,callback){generateCallBack(callback_id,[],!1,!0,callback);sendToSocket({dbkeys:callback_id,query:{table:String(table)}})};socket.getDBTablesValues=function(callback_id,tables,callback){generateCallBack(callback_id,[],!1,!0,callback);sendToSocket({dbkeyslist:callback_id,query:tables})};socket.removeDBValue=function(callback_id,table,key,callback){generateCallBack(callback_id,[],!1,!0,callback);sendToSocket({dbdelkey:callback_id,delkey:{table:String(table),key:String(key)}})};socket.removeDBValues=function(callback_id,dataObj,callback){generateCallBack(callback_id,dataObj.tables,!1,!0,callback);for(let i=0;i<dataObj.tables.length;i++){sendToSocket({dbdelkey:callback_id,delkey:{table:String(dataObj.tables[i]),key:String(dataObj.keys[i])}})}};webSocket.onopen=function(){helpers.log('Connection established with the websocket.',!0);sendToSocket({authenticate:getAuth()})};webSocket.onclose=function(){helpers.logError('Connection lost with the websocket.',!0);toastr.error('Connection lost with the websocket.','',{timeOut:0})};webSocket.onmessage=function(e){try{let message=JSON.parse(e.data);if(message.authresult!==undefined){if(message.authresult==='false'){helpers.logError('Failed to auth with the socket.',!0);toastr.error('Failed to auth with the socket.','',{timeOut:0})}else{if(localStorage.getItem('phantombot_beta_warning')!=='true'){if(confirm('Hey there! This panel is currently in its early development stages. '+'Bugs and issues are to be expected. If you find any, please report them under the beta panel post of the forums! Thank you.')){localStorage.setItem('phantombot_beta_warning','true')}else{return}}
$.loadPage('dashboard','dashboard.html')}
return}
let callback=callbacks[message.query_id],listener=listeners[message.query_id];if(callback!==undefined){if(!callback.isUpdate){if(callback.isArray){callback.queryData=message.results}else if(callback.storeKey===!0){callback.queryData[Object.keys(message.results)[1]]=message.results.value}else{callback.queryData[message.results.table]=message.results.value}}
if(--callback.await===0){callback.func(callback.queryData);delete callbacks[message.query_id]}}else if(listener!==undefined){listener(message.results)}}catch(ex){helpers.logError('Failed to parse message from socket: '+ex.stack,!0)}};window.socket=socket;window.timers=[]})