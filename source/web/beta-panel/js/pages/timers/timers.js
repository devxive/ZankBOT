$(run=function(){socket.getDBValue('notice_module_toggle','modules','./systems/noticeSystem.js',function(e){if(!helpers.getModuleStatus('noticesModule',e.modules)){return}
socket.getDBTableValues('timers_get_all','notices',function(results){let tableData=[];for(let i=0;i<results.length;i++){results[i].key=results[i].key.substring(8);tableData.push([results[i].key,results[i].value,$('<div/>',{'class':'btn-group'}).append($('<button/>',{'type':'button','class':'btn btn-xs btn-danger','style':'float: right','data-notice':results[i].key,'html':$('<i/>',{'class':'fa fa-trash'})})).append($('<button/>',{'type':'button','class':'btn btn-xs btn-warning','style':'float: right','data-notice':results[i].key,'html':$('<i/>',{'class':'fa fa-edit'})})).html()])}
if($.fn.DataTable.isDataTable('#timersTable')){$('#timersTable').DataTable().destroy();$('#timersTable').off()}
let table=$('#timersTable').DataTable({'searching':!0,'autoWidth':!1,'lengthChange':!1,'data':tableData,'columnDefs':[{'className':'default-table','orderable':!1,'targets':2},{'width':'3%','targets':0}],'columns':[{'title':'Id'},{'title':'Message'},{'title':'Actions'}]});table.on('click','.btn-danger',function(){let notice=$(this).data('notice');socket.sendCommand('notice_remove_cmd','notice removesilent '+notice,function(){run();toastr.success('Successfully removed the timer!')})});table.on('click','.btn-warning',function(){let notice=$(this).data('notice'),t=$(this);socket.getDBValue('notice_get_edit','notices','message_'+notice,function(e){helpers.getModal('edit-timer','Edit Timer','Save',$('<form/>',{'role':'form'}).append(helpers.getTextAreaGroup('notice-text','text','Timer Message','',e.notices,'Message of this timer. Use the "command:" prefix then the name of the command to run a command.')),function(){let noticeText=$('#notice-text');switch(!1){case helpers.handleInputString(noticeText):break;default:socket.sendCommand('notice_edit_cmd','notice editsilent '+notice+' '+noticeText.val(),function(){t.parents('tr').find('td:eq(1)').text(noticeText.val());$('#edit-timer').modal('hide');toastr.success('Successfully edited the timer!')})}}).modal('toggle')})})})})});$(function(){$('#noticesModuleToggle').on('change',function(){socket.sendCommandSync('notices_module_toggle_cmd','module '+($(this).is(':checked')?'enablesilent':'disablesilent')+' ./commands/noticeSystem.js',run)});$('#add-timer-button').on('click',function(){helpers.getModal('add-timer','Add Timer','Save',$('<form/>',{'role':'form'}).append(helpers.getTextAreaGroup('notice-text','text','Timer Message','Follow me on Twitter! https://twitter.com/PhantomBotApp','','Message of this timer. Use the "command:" prefix then the name of the command to run a command.')),function(){let noticeText=$('#notice-text');switch(!1){case helpers.handleInputString(noticeText):break;default:socket.sendCommand('notice_add_cmd','notice addsilent '+noticeText.val(),function(){run();$('#add-timer').modal('hide');toastr.success('Successfully added the timer!')})}}).modal('toggle')});$('#timer-settings-button').on('click',function(){socket.getDBValues('notice_get_settings',{tables:['noticeSettings','noticeSettings','noticeSettings','noticeSettings'],keys:['reqmessages','interval','noticetoggle','noticeOfflineToggle']},!0,function(e){helpers.getModal('settings-timer','Timer Settings','Save',$('<form/>',{'role':'form'}).append(helpers.getInputGroup('notice-interval','number','Timer Interval','',e.interval,'Interval at which a random timer is said in chat.')).append(helpers.getInputGroup('notice-reqmsg','number','Timer Required Messages','',e.reqmessages,'Amount of message required to trigger a random timer along with the interval.')).append(helpers.getDropdownGroup('notice-toggle','Active Timers',(e.noticetoggle==='true'?'Yes':'No'),['Yes','No'],'If the timers should be enabled.')).append(helpers.getDropdownGroup('notice-offline-toggle','Active Offline Timers',(e.noticeOfflineToggle==='true'?'Yes':'No'),['Yes','No'],'If the timers should be said in offline chat.')),function(){let noticeInterval=$('#notice-interval'),noticeReqMsg=$('#notice-reqmsg'),noticeToggle=$('#notice-toggle').find(':selected').text()==='Yes',noticeOfflineToggle=$('#notice-offline-toggle').find(':selected').text()==='Yes';switch(!1){case helpers.handleInputNumber(noticeInterval):case helpers.handleInputNumber(noticeReqMsg):break;default:socket.updateDBValues('notices_update_settings',{tables:['noticeSettings','noticeSettings','noticeSettings','noticeSettings'],keys:['reqmessages','interval','noticetoggle','noticeOfflineToggle'],values:[noticeReqMsg.val(),noticeInterval.val(),noticeToggle,noticeOfflineToggle]},function(){socket.sendCommand('notices_update_settings_cmd','reloadnotice',function(){$('#settings-timer').modal('hide');toastr.success('Successfully updated timer settings')})})}}).modal('toggle')})})})